{"ast":null,"code":"var db = require('mime-db'); // types[extension] = type\n\n\nexports.types = Object.create(null); // extensions[type] = [extensions]\n\nexports.extensions = Object.create(null);\nObject.keys(db).forEach(function (name) {\n  var mime = db[name];\n  var exts = mime.extensions;\n  if (!exts || !exts.length) return;\n  exports.extensions[name] = exts;\n  exts.forEach(function (ext) {\n    exports.types[ext] = name;\n  });\n});\n\nexports.lookup = function (string) {\n  if (!string || typeof string !== \"string\") return false; // remove any leading paths, though we should just use path.basename\n\n  string = string.replace(/.*[\\.\\/\\\\]/, '').toLowerCase();\n  if (!string) return false;\n  return exports.types[string] || false;\n};\n\nexports.extension = function (type) {\n  if (!type || typeof type !== \"string\") return false; // to do: use media-typer\n\n  type = type.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/);\n  if (!type) return false;\n  var exts = exports.extensions[type[1].toLowerCase()];\n  if (!exts || !exts.length) return false;\n  return exts[0];\n}; // type has to be an exact mime type\n\n\nexports.charset = function (type) {\n  var mime = db[type];\n  if (mime && mime.charset) return mime.charset; // default text/* to utf-8\n\n  if (/^text\\//.test(type)) return 'UTF-8';\n  return false;\n}; // backwards compatibility\n\n\nexports.charsets = {\n  lookup: exports.charset\n}; // to do: maybe use set-type module or something\n\nexports.contentType = function (type) {\n  if (!type || typeof type !== \"string\") return false;\n  if (!~type.indexOf('/')) type = exports.lookup(type);\n  if (!type) return false;\n\n  if (!~type.indexOf('charset')) {\n    var charset = exports.charset(type);\n    if (charset) type += '; charset=' + charset.toLowerCase();\n  }\n\n  return type;\n};","map":{"version":3,"sources":["C:/Users/porti/Desktop/quote-machine/node_modules/unirest/node_modules/mime-types/index.js"],"names":["db","require","exports","types","Object","create","extensions","keys","forEach","name","mime","exts","length","ext","lookup","string","replace","toLowerCase","extension","type","match","charset","test","charsets","contentType","indexOf"],"mappings":"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","sourcesContent":["\nvar db = require('mime-db')\n\n// types[extension] = type\nexports.types = Object.create(null)\n// extensions[type] = [extensions]\nexports.extensions = Object.create(null)\n\nObject.keys(db).forEach(function (name) {\n  var mime = db[name]\n  var exts = mime.extensions\n  if (!exts || !exts.length) return\n  exports.extensions[name] = exts\n  exts.forEach(function (ext) {\n    exports.types[ext] = name\n  })\n})\n\nexports.lookup = function (string) {\n  if (!string || typeof string !== \"string\") return false\n  // remove any leading paths, though we should just use path.basename\n  string = string.replace(/.*[\\.\\/\\\\]/, '').toLowerCase()\n  if (!string) return false\n  return exports.types[string] || false\n}\n\nexports.extension = function (type) {\n  if (!type || typeof type !== \"string\") return false\n  // to do: use media-typer\n  type = type.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/)\n  if (!type) return false\n  var exts = exports.extensions[type[1].toLowerCase()]\n  if (!exts || !exts.length) return false\n  return exts[0]\n}\n\n// type has to be an exact mime type\nexports.charset = function (type) {\n  var mime = db[type]\n  if (mime && mime.charset) return mime.charset\n\n  // default text/* to utf-8\n  if (/^text\\//.test(type)) return 'UTF-8'\n\n  return false\n}\n\n// backwards compatibility\nexports.charsets = {\n  lookup: exports.charset\n}\n\n// to do: maybe use set-type module or something\nexports.contentType = function (type) {\n  if (!type || typeof type !== \"string\") return false\n  if (!~type.indexOf('/')) type = exports.lookup(type)\n  if (!type) return false\n  if (!~type.indexOf('charset')) {\n    var charset = exports.charset(type)\n    if (charset) type += '; charset=' + charset.toLowerCase()\n  }\n  return type\n}\n"]},"metadata":{},"sourceType":"script"}